Peer Grader: Angel 

Grade Part1: 55/60
Grade Part2: 10/10
Looks good!
=================================================
- Functionality: 40/40
  ++ parse_args: 20/20
  ++ fork/exec/wait: 15/15  //to fix this I was actally parsing my args incorrectly causing some of the execs to work and some not.
  ++ still calling built-ins: 5/5 //All I had to do was add a char * path to pass into cd

- Code quality: 15/20
  ++ valgrind (no errors and all memory cleared): 05/10
     + 3 bonus points for child
  ++ error handling for all system calls: 5/5
  ++ comments, code is well formatted, consistent, and easy to read: 5/5


  -Reflection:

  This program really tested my confidence in my code. Logically my code made sense to me however I ran into a lot of issues with my fork and exec.
  Turned out that my parse_args was prasing incorrectly adding my exe command to the wrong index of args[] and then it was being written over
  by a null due to one line out of place. Once I swallowed my pride and asked for help on this issue Marissa was able to help be find it and fix it.
  Other than I didn't have any major issues besides understanding what the children were and where I was created, but much like my other issue
  was easy explained to me from a tutor.

=========================
Submitted Files
-------------------------
.
├── history.c
├── history.h
├── Makefile
├── README.md
├── rubric.txt
└── smash.c

0 directories, 6 files
Test Results
-------------------------
==17951== Memcheck, a memory error detector
==17951== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==17951== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==17951== Command: ./smash
==17951==
$ commands.txt
history.c
history.h
history.o
Makefile
output.txt
README.md
rubric.txt
run.sh
smash
smash.c
smash.o
$ #include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include "history.h"
#define MAX 2048
#define CHANGE "cd"
#define LEAVE "exit"
#define PRINT "pwd"
#define HIST "history"


/*parse arguments*/
 void parse_args(char* line, char** argv, int* argc){

 	*argc = 0;
	char* token = strtok(line, " ");

 	while(token != NULL){

		 argv[*argc] = (char*)malloc(sizeof(char)*(strlen(token)+1));
		 strcpy(argv[*argc], token);
		 token = strtok(NULL, " ");
		  (*argc)++;

 	}
	(argv[*argc]) = NULL;

}

/*cd function*/
void smash_cd(char *path){

	int i = chdir(path);
	char x[MAX];

	if (i == 0){

		if(getcwd(x, MAX)!= NULL){
			printf("%s\n", x);
			}
	}
	else{
		fprintf(stderr, "Directory %s Doesn't exist\n", path);
	}
}

/*pwd function*/
void smash_pwd(){

	char x[MAX];
	getcwd(x, MAX);
	printf("%s\n", x);
}

/*input function*/
int smash_input(char *line, int i, char** argv, int argc){

	while (fgets(line, MAX, stdin) != NULL){

		line[strlen(line) - 1] = '\0';
		parse_args(line, argv, &argc);
		char *token = argv[0];
		char *path = argv[1];
		srand(time(NULL));
		int modVal = 4;

		add_history(token);


		//empty command
		if(token == NULL){
			fprintf(stderr,"$ ");
			continue;
		}

		//exit
		else if(strcmp(token, LEAVE) == 0){
			i = 0;
			while(argv[i] != NULL){
				free(argv[i]);
				i++;
			}
			clear_history();
			return EXIT_SUCCESS;
		}

		//cd
		else if(strcmp(token, CHANGE) == 0){
			smash_cd(path);
		}

		//pwd
		else if(strcmp(token, PRINT) == 0){
			smash_pwd();
		}

		//history
		else if(strcmp(token, HIST) == 0){
			print_history();
		}

		//fork/exc/wait
		else{

				pid_t pid;
				int status;
				char* exe = argv[0];
				char** args = argv;

				if((pid = fork()) < 0){
					perror("fork");

					clear_history();
					exit(errno);
				}
				else if (pid == 0){

					//if no args to exe
					if (exe == NULL){

						free(argv);
						clear_history();
						printf("erorr");
					}
					//else execvp
					else{
						int randVal = rand() % modVal;

						if(randVal == 1){
					 		kill(getpid(), SIGKILL);
					 	}

						execvp(exe, args);

					}

					/*SHOULDN'T GET THIS FAR*/
					//free(args);
					perror("exec failed");
					exit(errno);
				}


				else {
					while (wait(&status) != pid); //wait for child to die
					int randVal = rand() % modVal;
					if(randVal == 1){
					 		printf("Child %d: terminated\n", pid);
					 	}
					 	else{
					 		printf("Child %d: exited normally\n", pid);
						}
					}
			}
		fprintf(stderr,"$ ");

		i = 0;
		while(argv[i] != NULL){
				free(argv[i]);
				i++;
		}
	}

	return EXIT_SUCCESS;
}

int main(void){

	init_history(10);
	char line[MAX];
	char* argv[MAX];
	int argc = 0;

	int i = 0;

	fprintf(stderr,"$ ");

	smash_input(line, i, argv, argc);

	/*SHOULDN'T GET THIS FAR*/
	return EXIT_SUCCESS;
}
$ exec failed: No such file or directory
Child 17952: exited normally
Child 17953: exited normally
==17954==
==17954== HEAP SUMMARY:
==17954==     in use at exit: 17 bytes in 4 blocks
==17954==   total heap usage: 7 allocs, 3 frees, 32 bytes allocated
==17954==
==17954== LEAK SUMMARY:
==17954==    definitely lost: 0 bytes in 0 blocks
==17954==    indirectly lost: 0 bytes in 0 blocks
==17954==      possibly lost: 0 bytes in 0 blocks
==17954==    still reachable: 17 bytes in 4 blocks
==17954==         suppressed: 0 bytes in 0 blocks
==17954== Reachable blocks (those to which a pointer was found) are not shown.
==17954== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==17954==
==17954== For counts of detected and suppressed errors, rerun with: -v
==17954== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
$ $ Child 17952: exited normally
Child 17953: exited normally
Child 17954: exited normally
0   ls
1   cat
2   blah
3   history
==17951==
==17951== HEAP SUMMARY:
==17951==     in use at exit: 0 bytes in 0 blocks
==17951==   total heap usage: 11 allocs, 11 frees, 58 bytes allocated
==17951==
==17951== All heap blocks were freed -- no leaks are possible
==17951==
==17951== For counts of detected and suppressed errors, rerun with: -v
==17951== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
